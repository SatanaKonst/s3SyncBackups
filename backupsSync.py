# –°–∫—Ä–∏–ø—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ rclone
import sys
from os import unlink, getenv
from dotenv import load_dotenv
from pathlib import Path
import logging
import functions

load_dotenv()

logger = logging.getLogger(__name__)
logging.basicConfig(filename=getenv('LOG_FILE'), encoding='utf-8', level=logging.DEBUG)

# –ò–º—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
REMOTE_NAME = getenv('REMOTE_NAME')

# –ü—É—Ç–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –±—ç–∫–∞–ø–æ–≤
BACKUP_CONTAINER_NAME = getenv('BACKUP_CONTAINER_NAME')
BACKUP_LOCAL_DIR = getenv('BACKUP_LOCAL_DIR')

# –ö–æ–ª-–≤–æ —Ö—Ä–∞–Ω–∏–º—ã—Ö –±—ç–∫–∞–ø–æ–≤
BACKUP_SAVE_COUNT = int(getenv('BACKUP_SAVE_COUNT'))

localBackups = functions.getLocalBackups(BACKUP_LOCAL_DIR)
remoteBackups = functions.getRemoteBackups(REMOTE_NAME, BACKUP_CONTAINER_NAME)

if not remoteBackups:
    logger.info('Remote backups empty')
    if len(localBackups) > 0:
        logger.info('‚ñ∂ Start upload backups')
        # –ü–æ–ª—É—á–∏–º —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤
        for localBackupFileName in localBackups:
            uploadStatus = functions.uploadBackup(REMOTE_NAME, BACKUP_CONTAINER_NAME,
                                                  BACKUP_LOCAL_DIR + localBackupFileName)
            if uploadStatus == False:
                logger.error('‚ùå Error upload backup ' + localBackupFileName)
            else:
                logger.info('‚úÖ Success upload ' + localBackupFileName)

else:
    remoteBackupsGroup = functions.groupBackups(remoteBackups)
    localBackupsGroup = functions.groupBackups(localBackups)

    # –ë–µ–∂–∏–º –ø–æ –±—ç–∫–∞–ø–∞–º –ª–æ–∫–∞–ª—å–Ω—ã–º –∏ —Å–º–æ—Ç—Ä–∏–º –µ—Å—Ç—å –ª–∏ –≤ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö
    logger.info('‚ñ∂ Start sync backups')
    for vmId in localBackupsGroup:
        if not vmId in remoteBackupsGroup:
            remoteBackupsGroup[vmId] = []

        localBackupsDiff = list(set(localBackupsGroup[vmId]) - set(remoteBackupsGroup[vmId]))

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±—ç–∫–∞–ø—ã –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –æ–±–ª–∞–∫–µ
        if len(localBackupsDiff) > 0:
            for uploadBackupFilePath in localBackupsDiff:
                uploadStatus = functions.uploadBackup(REMOTE_NAME, BACKUP_CONTAINER_NAME,
                                                      BACKUP_LOCAL_DIR + uploadBackupFilePath)
                if uploadStatus == False:
                    logger.error("‚ùå Error upload backup: " + uploadBackupFilePath)
                else:
                    logger.info("‚úÖ Success upload: " + uploadBackupFilePath)
                    # –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –±—ç–∫–∞–ø –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
                    if getenv('REMOVE_LOCAL_BACKUP', 'N') == 'Y':
                        unlink(BACKUP_LOCAL_DIR + uploadBackupFilePath)
                        logger.info("üóë‚úÖ Remove local backup: " + uploadBackupFilePath)

    # –ß–∏—Å—Ç–∏–º –æ–±–ª–∞–∫–æ –æ—Ç —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤
    errors = functions.clearRemoteBackups(BACKUP_SAVE_COUNT, REMOTE_NAME, BACKUP_CONTAINER_NAME)
    if len(errors) > 0:
        logger.info("‚ôª Clear remote storage\n" + ", ".join(errors))

logger.info('‚èπ End sync backups')
if getenv('SEND_TELEGRAM') == 'Y':
    sendResponse = functions.telegram_bot_sendtext(
        getenv('TELEGRAM_TOKEN'),
        getenv('TELEGRAM_BOT_CHAT_ID'),
        getenv('TELEGRAM_MESSAGE_HEADER') + "\n\n" +
        "üîÜComplete Sync backups.\n\n" + Path(getenv('LOG_FILE')).read_text()
    )
    print(sendResponse)
    unlink(getenv('LOG_FILE'))

print('End sync backups')
